#+TITLE:       List Comprehensions
#+AUTHOR:      Abram Hindle
#+DATE:        <2017-02-13 Mon>
#+EMAIL:       hindle1@ualberta.ca  
#+LANGUAGE:    language, e.g. ‘en’ (org-export-default-language)
#+OPTIONS:     exports:both
#+PROPERTY:  eval yes
#+PROPERTY:  exports both
#+PROPERTY: header-args    :results value raw
#+PROPERTY: header-args    :results output replace

* List Comprehensions
** Let's get a list of letters
    
    #+begin_src python :session
    asciis = range(ord("A"),ord("Z"))
    asciis
    #+end_src
    
    #+RESULTS:
    : 
    : [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89]

    
** Those aren't letters so how do we get letters back from them?
    
    #+begin_src python :session
    chr(asciis[0])
    #+end_src
    
    #+RESULTS:
    : 'A'


** Those aren't letters so how do we get letters back from them?
    
    #+begin_src python :session
    l = []
    for i in asciis:
        l.append(chr(i))
    
    l
    #+end_src
    
    #+RESULTS:
    : 
    : ... ... >>> ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y']
    
** That's a lot of code, if only it could be simpler!
   
   But it can be!
   
   #+begin_src python :session
   l2 = [chr(i) for i in asciis]
   
   l2
   #+end_src
   
   #+RESULTS:
   : 
   : >>> ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y']

** List Comprehensions
 
   - Use of a list comprehension as a mapping
   #+begin_src python
   [expression_of(a) for a in a_list]
   #+end_src

   - Use of a list comprehension as a mapping with a filter
   #+begin_src python
   [expression_of(a) for a in a_list if conditional_of(a)]
   #+end_src
   
** List Comprehensions (Mapping)
   - Let's try it out
   #+begin_src python :session
   a_list = range(0,10)
   expression_of = lambda x: 2*x
   l = [expression_of(a) for a in a_list]
   l
   #+end_src

   #+RESULTS:
   : 
   : >>> >>> [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

   - or directly 


   #+begin_src python :session
   l = [2*a for a in range(0,10)]
   l
   #+end_src

   #+RESULTS:
   : 
   : [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]




** List Comprehensions (Mapping and Filtering)
   - Let's try it out
   #+begin_src python :session
   a_list = range(0,10)
   expression_of = lambda x: 2*x
   condition_of = lambda x: x%2 == 0
   l = [expression_of(a) for a in a_list if condition_of(a)]
   l
   #+end_src

   #+RESULTS:
   : 
   : >>> >>> >>> [0, 4, 8, 12, 16]

   - or directly 

   #+begin_src python :session
   l = [2*a for a in range(0,10) if a%2 == 0]
   l
   #+end_src

   #+RESULTS:
   : [0, 4, 8, 12, 16]

   
** List Comprehensions Chaining

   You can chain the for calls. The precedence is confusing.

   #+begin_src python :session
   [str(outer) + str(inner) for outer in range(0,3) for inner in range(0,3)]
   #+end_src

   #+RESULTS:
   : ['00', '01', '02', '10', '11', '12', '20', '21', '22']

   You can filter too

   #+begin_src python :session
   [str(outer) + str(inner) for outer in range(0,3) if (outer+inner) % 2 == 0 for inner in range(0,3)]
   #+end_src

   #+RESULTS:
   : ['00', '01', '02', '20', '21', '22']

   But the order of filtering can be confusing

   #+begin_src python :session
   [str(outer) + str(inner) for outer in range(0,3) for inner in range(0,3) if (outer+inner) % 2 == 0 ]
   #+end_src

   #+RESULTS:
   : ['00', '02', '11', '20', '22']


** List Comprehensions Nesting

   You can nest list comprehensions. This enables multiple levels of
   mapping and filtering.

   #+begin_src python :session
   [str(outer) for outer in [inner+1 for inner in range(0,3)]]
   #+end_src

   #+RESULTS:
   : ['1', '2', '3']

   Let's go back to chaining and using nesting with chaining

   #+begin_src python :session
   [str(x[0])+str(x[1]) for x in 
       [(outer,inner) for outer in range(0,3) for inner in range(0,3)]
       if (x[0] + x[1])%2 == 0]
   #+end_src

   #+RESULTS:
   : 
   : ... ['00', '02', '11', '20', '22']

   or we can avoid indexing the tuple

   #+begin_src python :session
   [str(a)+str(b) for a, b in 
       [(outer,inner) for outer in range(0,3) for inner in range(0,3)]
       if (a + b)%2 == 0]
   #+end_src

   #+RESULTS:
   : 
   : ... ['00', '02', '11', '20', '22']

* List Comprehension Recipes
** Make everything a string!   
   #+begin_src python :session
   import random
   def trouble():
       if random.choice([True,False]):
           return random.choice(["a","b","c","d","e","f"])
       return random.choice(range(1,10))
   
   trouble()
   #+end_src

   #+RESULTS:
   : 
   : ... ... ... ... >>> 'b'

   Let's get 10 troubles

   #+begin_src python :session
   l = [trouble() for i in range(0,10)]
   l
   #+end_src

   #+RESULTS:
   : 
   : ['f', 1, 8, 2, 3, 4, 8, 'b', 7, 8]

   Now let's concatenate them!
   
   #+begin_src python :session
   "---".join(l)
   #+end_src

   #+RESULTS:
   : Traceback (most recent call last):
   :   File "<stdin>", line 1, in <module>
   : TypeError: sequence item 1: expected string, int found

   Oh they aren't all strings :( So let's make sure they are all strings

   #+begin_src python :session
   "---".join([str(x) for x in l])
   #+end_src

   #+RESULTS:
   : 'f---1---8---2---3---4---8---b---7---8'

   
   
** Keep only strings!
   #+begin_src python :session
   import random
   def more_trouble():
       if random.choice([True,False]):
           return random.choice(["a","b","c","d","e","f"])
       return None
   
   more_trouble()
   #+end_src

   #+RESULTS:
   : 
   : ... ... ... ... >>> 'b'

   Let's get 10 troubles

   #+begin_src python :session
   ml = [more_trouble() for i in range(0,10)]
   ml
   #+end_src

   #+RESULTS:
   : 
   : ['b', None, None, None, 'f', 'b', None, None, 'f', 'a']

   Now let's concatenate them!
   
   #+begin_src python :session
   "---".join(ml)
   #+end_src

   #+RESULTS:
   : Traceback (most recent call last):
   :   File "<stdin>", line 1, in <module>
   : TypeError: sequence item 1: expected string, NoneType found

   Oh I only want to print strings. By Sven Marnach (https://stackoverflow.com/users/279627/sven-marnach) https://stackoverflow.com/questions/4843173/how-to-check-if-type-of-a-variable-is-string

   #+begin_src python :session
   "---".join([str(x) for x in ml if isinstance(x,str)])
   #+end_src

   #+RESULTS:
   : 'b---f---b---f---a'

   
   
** Filter out words I don't know!
   
   Let's filter out words we don't know from a string!

   #+begin_src python :session
   words_known = set("a fat lazy dog ate a mouse a fox and a cat".split(" "))
   words_known
   #+end_src

   #+RESULTS:
   : 
   : set(['a', 'and', 'lazy', 'ate', 'fox', 'dog', 'fat', 'cat', 'mouse'])

   #+begin_src python :session
   sentence = "sometimes i spend some time with cat and dog unless they are being lazy"
   [x for x in sentence.split(" ") if x in words_known]
   #+end_src

   #+RESULTS:
   : 
   : ['cat', 'and', 'dog', 'lazy']

** Make a 2 dimensional array   

   #+begin_src python :session
   blocks = [["X" for x in range(0,10)] for y in range(0,10)]

   blocks
   #+end_src

   #+RESULTS:
   : 
   : >>> [['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X']]

   Now make a string out of it
   #+begin_src python :session
   block_str = "\n".join(["".join(x) for x in blocks])
   print(block_str)
   #+end_src

   #+RESULTS:
   #+begin_example

   XXXXXXXXXX
   XXXXXXXXXX
   XXXXXXXXXX
   XXXXXXXXXX
   XXXXXXXXXX
   XXXXXXXXXX
   XXXXXXXXXX
   XXXXXXXXXX
   XXXXXXXXXX
   XXXXXXXXXX
#+end_example

   


* Notes

C-c C-c this to stop confirmation on python

#+begin_src elisp
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "python")))  ; don't ask for ditaa
(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
#+end_src

From orgmode http://orgmode.org/manual/Code-evaluation-security.html
Org-Mode Manual


** If you're really desperate with babel try this:

#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))
#+end_src

From Orgmode http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html

